#!/usr/bin/env bash
# Run all jobs of a given playbook.
set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable
set -o errexit   ## set -e : exit the script if any statement returns a non-true return value


__run_module() {
  module="$1"
  
  # shared path is defined and local module doesn't exist
  if [ -n "${W_SHARED_PATH-}" ] && [ ! -d "./modules/$module" ]; then
    module_path="$W_SHARED_PATH/modules/$module"
  else
    module_path="./modules/$module"
  fi

  # prepare remote script
  script_local="${module_path}/setup.sh"
  script_remote_path=".welder/${module}.sh"
  scp -qP "$W_SSH_PORT" "$script_local" "${W_SSH_URL}:${script_remote_path}"
  ssh -qp "$W_SSH_PORT" "$W_SSH_URL" "chmod +x '${script_remote_path}'"

  if [ -z ${sudo_pass+x} ]; then
    # no sudo_pass set, run the script directly
    ssh -qtp "$W_SSH_PORT" "$W_SSH_URL" ".welder/launcher.sh $module"
  else
    # wrap the ssh script with an "expect" script to automatically enter the sudo password
    command="ssh -t $W_SSH_URL -p $W_SSH_PORT .welder/launcher.sh $module"
    SUDO_PASS="$sudo_pass" $WELDER_ROOT/libexec/priv/run-ssh-script2 $command
  fi
}

# Run all *.sh scripts for each module listed in $playbook
__run_scripts() {
  echo

  for module in "${W_MODULES[@]}"; do
    __info "module '$module'\n"

    __run_module "$module"

    echo
  done
}

exit_handler() {
  if [ $completed = 0 ]; then
    echo "  …"
    __warn "execution aborted, cleaning up …"
  fi
  
  welder cleanup $playbook
  
  if [ $completed = 1 ]; then
    __success "all done!"
  fi
}

### end: function definitions

completed=0
trap 'exit_handler' EXIT

. $WELDER_ROOT/libexec/priv/_helpers

playbook="$1"
[ -z "$playbook" ] && __fail "Usage: welder run <playbook-name>"

__load_config "$playbook.yml"

[ ! -d ./modules ] && __fail "no modules/ directory found"

welder compile $playbook

# Ask sudo password for non-root users
# For this to work, ssh_url needs to follow user@server-url format
if [ ${W_ASK_SUDO_PASSWORD:-0} = 1 ] && [[ ! $W_SSH_URL =~ root\@.* ]]; then
  __user "what's the sudo password for $W_SSH_URL: "
  read -se sudo_pass
fi

__run_scripts

completed=1
